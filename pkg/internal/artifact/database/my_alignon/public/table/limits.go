//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Limits = newLimitsTable("public", "limits", "")

type limitsTable struct {
	postgres.Table

	// Columns
	ConsumerID postgres.ColumnString
	Tenor1     postgres.ColumnInteger
	Tenor2     postgres.ColumnInteger
	Tenor3     postgres.ColumnInteger
	Tenor4     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LimitsTable struct {
	limitsTable

	EXCLUDED limitsTable
}

// AS creates new LimitsTable with assigned alias
func (a LimitsTable) AS(alias string) *LimitsTable {
	return newLimitsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LimitsTable with assigned schema name
func (a LimitsTable) FromSchema(schemaName string) *LimitsTable {
	return newLimitsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LimitsTable with assigned table prefix
func (a LimitsTable) WithPrefix(prefix string) *LimitsTable {
	return newLimitsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LimitsTable with assigned table suffix
func (a LimitsTable) WithSuffix(suffix string) *LimitsTable {
	return newLimitsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLimitsTable(schemaName, tableName, alias string) *LimitsTable {
	return &LimitsTable{
		limitsTable: newLimitsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newLimitsTableImpl("", "excluded", ""),
	}
}

func newLimitsTableImpl(schemaName, tableName, alias string) limitsTable {
	var (
		ConsumerIDColumn = postgres.StringColumn("consumer_id")
		Tenor1Column     = postgres.IntegerColumn("tenor_1")
		Tenor2Column     = postgres.IntegerColumn("tenor_2")
		Tenor3Column     = postgres.IntegerColumn("tenor_3")
		Tenor4Column     = postgres.IntegerColumn("tenor_4")
		allColumns       = postgres.ColumnList{ConsumerIDColumn, Tenor1Column, Tenor2Column, Tenor3Column, Tenor4Column}
		mutableColumns   = postgres.ColumnList{Tenor1Column, Tenor2Column, Tenor3Column, Tenor4Column}
	)

	return limitsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ConsumerID: ConsumerIDColumn,
		Tenor1:     Tenor1Column,
		Tenor2:     Tenor2Column,
		Tenor3:     Tenor3Column,
		Tenor4:     Tenor4Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
