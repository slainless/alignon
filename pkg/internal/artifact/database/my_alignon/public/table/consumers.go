//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Consumers = newConsumersTable("public", "consumers", "")

type consumersTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Nik         postgres.ColumnString
	Email       postgres.ColumnString
	FullName    postgres.ColumnString
	LegalName   postgres.ColumnString
	BirthPlace  postgres.ColumnString
	BirthDate   postgres.ColumnDate
	Salary      postgres.ColumnInteger
	KtpPhoto    postgres.ColumnString
	SelfiePhoto postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConsumersTable struct {
	consumersTable

	EXCLUDED consumersTable
}

// AS creates new ConsumersTable with assigned alias
func (a ConsumersTable) AS(alias string) *ConsumersTable {
	return newConsumersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConsumersTable with assigned schema name
func (a ConsumersTable) FromSchema(schemaName string) *ConsumersTable {
	return newConsumersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConsumersTable with assigned table prefix
func (a ConsumersTable) WithPrefix(prefix string) *ConsumersTable {
	return newConsumersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConsumersTable with assigned table suffix
func (a ConsumersTable) WithSuffix(suffix string) *ConsumersTable {
	return newConsumersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConsumersTable(schemaName, tableName, alias string) *ConsumersTable {
	return &ConsumersTable{
		consumersTable: newConsumersTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newConsumersTableImpl("", "excluded", ""),
	}
}

func newConsumersTableImpl(schemaName, tableName, alias string) consumersTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NikColumn         = postgres.StringColumn("NIK")
		EmailColumn       = postgres.StringColumn("email")
		FullNameColumn    = postgres.StringColumn("full_name")
		LegalNameColumn   = postgres.StringColumn("legal_name")
		BirthPlaceColumn  = postgres.StringColumn("birth_place")
		BirthDateColumn   = postgres.DateColumn("birth_date")
		SalaryColumn      = postgres.IntegerColumn("salary")
		KtpPhotoColumn    = postgres.StringColumn("ktp_photo")
		SelfiePhotoColumn = postgres.StringColumn("selfie_photo")
		allColumns        = postgres.ColumnList{IDColumn, NikColumn, EmailColumn, FullNameColumn, LegalNameColumn, BirthPlaceColumn, BirthDateColumn, SalaryColumn, KtpPhotoColumn, SelfiePhotoColumn}
		mutableColumns    = postgres.ColumnList{NikColumn, EmailColumn, FullNameColumn, LegalNameColumn, BirthPlaceColumn, BirthDateColumn, SalaryColumn, KtpPhotoColumn, SelfiePhotoColumn}
	)

	return consumersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Nik:         NikColumn,
		Email:       EmailColumn,
		FullName:    FullNameColumn,
		LegalName:   LegalNameColumn,
		BirthPlace:  BirthPlaceColumn,
		BirthDate:   BirthDateColumn,
		Salary:      SalaryColumn,
		KtpPhoto:    KtpPhotoColumn,
		SelfiePhoto: SelfiePhotoColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
